/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.supersidor.flightmap.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Position extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 124761028540376934L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Position\",\"namespace\":\"com.supersidor.flightmap.avro\",\"fields\":[{\"name\":\"title\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"altitude\",\"type\":\"float\"},{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"longitude\",\"type\":\"double\"},{\"name\":\"heading\",\"type\":\"float\"},{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"userId\",\"type\":\"long\",\"default\":-1}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Position> ENCODER =
      new BinaryMessageEncoder<Position>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Position> DECODER =
      new BinaryMessageDecoder<Position>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Position> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Position> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Position> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Position>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Position to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Position from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Position instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Position fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String title;
  @Deprecated public float altitude;
  @Deprecated public double latitude;
  @Deprecated public double longitude;
  @Deprecated public float heading;
  @Deprecated public long timestamp;
  @Deprecated public long userId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Position() {}

  /**
   * All-args constructor.
   * @param title The new value for title
   * @param altitude The new value for altitude
   * @param latitude The new value for latitude
   * @param longitude The new value for longitude
   * @param heading The new value for heading
   * @param timestamp The new value for timestamp
   * @param userId The new value for userId
   */
  public Position(java.lang.String title, java.lang.Float altitude, java.lang.Double latitude, java.lang.Double longitude, java.lang.Float heading, java.lang.Long timestamp, java.lang.Long userId) {
    this.title = title;
    this.altitude = altitude;
    this.latitude = latitude;
    this.longitude = longitude;
    this.heading = heading;
    this.timestamp = timestamp;
    this.userId = userId;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return title;
    case 1: return altitude;
    case 2: return latitude;
    case 3: return longitude;
    case 4: return heading;
    case 5: return timestamp;
    case 6: return userId;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: title = value$ != null ? value$.toString() : null; break;
    case 1: altitude = (java.lang.Float)value$; break;
    case 2: latitude = (java.lang.Double)value$; break;
    case 3: longitude = (java.lang.Double)value$; break;
    case 4: heading = (java.lang.Float)value$; break;
    case 5: timestamp = (java.lang.Long)value$; break;
    case 6: userId = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'title' field.
   * @return The value of the 'title' field.
   */
  public java.lang.String getTitle() {
    return title;
  }


  /**
   * Sets the value of the 'title' field.
   * @param value the value to set.
   */
  public void setTitle(java.lang.String value) {
    this.title = value;
  }

  /**
   * Gets the value of the 'altitude' field.
   * @return The value of the 'altitude' field.
   */
  public float getAltitude() {
    return altitude;
  }


  /**
   * Sets the value of the 'altitude' field.
   * @param value the value to set.
   */
  public void setAltitude(float value) {
    this.altitude = value;
  }

  /**
   * Gets the value of the 'latitude' field.
   * @return The value of the 'latitude' field.
   */
  public double getLatitude() {
    return latitude;
  }


  /**
   * Sets the value of the 'latitude' field.
   * @param value the value to set.
   */
  public void setLatitude(double value) {
    this.latitude = value;
  }

  /**
   * Gets the value of the 'longitude' field.
   * @return The value of the 'longitude' field.
   */
  public double getLongitude() {
    return longitude;
  }


  /**
   * Sets the value of the 'longitude' field.
   * @param value the value to set.
   */
  public void setLongitude(double value) {
    this.longitude = value;
  }

  /**
   * Gets the value of the 'heading' field.
   * @return The value of the 'heading' field.
   */
  public float getHeading() {
    return heading;
  }


  /**
   * Sets the value of the 'heading' field.
   * @param value the value to set.
   */
  public void setHeading(float value) {
    this.heading = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public long getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'userId' field.
   * @return The value of the 'userId' field.
   */
  public long getUserId() {
    return userId;
  }


  /**
   * Sets the value of the 'userId' field.
   * @param value the value to set.
   */
  public void setUserId(long value) {
    this.userId = value;
  }

  /**
   * Creates a new Position RecordBuilder.
   * @return A new Position RecordBuilder
   */
  public static com.supersidor.flightmap.avro.Position.Builder newBuilder() {
    return new com.supersidor.flightmap.avro.Position.Builder();
  }

  /**
   * Creates a new Position RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Position RecordBuilder
   */
  public static com.supersidor.flightmap.avro.Position.Builder newBuilder(com.supersidor.flightmap.avro.Position.Builder other) {
    if (other == null) {
      return new com.supersidor.flightmap.avro.Position.Builder();
    } else {
      return new com.supersidor.flightmap.avro.Position.Builder(other);
    }
  }

  /**
   * Creates a new Position RecordBuilder by copying an existing Position instance.
   * @param other The existing instance to copy.
   * @return A new Position RecordBuilder
   */
  public static com.supersidor.flightmap.avro.Position.Builder newBuilder(com.supersidor.flightmap.avro.Position other) {
    if (other == null) {
      return new com.supersidor.flightmap.avro.Position.Builder();
    } else {
      return new com.supersidor.flightmap.avro.Position.Builder(other);
    }
  }

  /**
   * RecordBuilder for Position instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Position>
    implements org.apache.avro.data.RecordBuilder<Position> {

    private java.lang.String title;
    private float altitude;
    private double latitude;
    private double longitude;
    private float heading;
    private long timestamp;
    private long userId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.supersidor.flightmap.avro.Position.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.title)) {
        this.title = data().deepCopy(fields()[0].schema(), other.title);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.altitude)) {
        this.altitude = data().deepCopy(fields()[1].schema(), other.altitude);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.latitude)) {
        this.latitude = data().deepCopy(fields()[2].schema(), other.latitude);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.longitude)) {
        this.longitude = data().deepCopy(fields()[3].schema(), other.longitude);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.heading)) {
        this.heading = data().deepCopy(fields()[4].schema(), other.heading);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[5].schema(), other.timestamp);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.userId)) {
        this.userId = data().deepCopy(fields()[6].schema(), other.userId);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing Position instance
     * @param other The existing instance to copy.
     */
    private Builder(com.supersidor.flightmap.avro.Position other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.title)) {
        this.title = data().deepCopy(fields()[0].schema(), other.title);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.altitude)) {
        this.altitude = data().deepCopy(fields()[1].schema(), other.altitude);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.latitude)) {
        this.latitude = data().deepCopy(fields()[2].schema(), other.latitude);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.longitude)) {
        this.longitude = data().deepCopy(fields()[3].schema(), other.longitude);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.heading)) {
        this.heading = data().deepCopy(fields()[4].schema(), other.heading);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[5].schema(), other.timestamp);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.userId)) {
        this.userId = data().deepCopy(fields()[6].schema(), other.userId);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'title' field.
      * @return The value.
      */
    public java.lang.String getTitle() {
      return title;
    }


    /**
      * Sets the value of the 'title' field.
      * @param value The value of 'title'.
      * @return This builder.
      */
    public com.supersidor.flightmap.avro.Position.Builder setTitle(java.lang.String value) {
      validate(fields()[0], value);
      this.title = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'title' field has been set.
      * @return True if the 'title' field has been set, false otherwise.
      */
    public boolean hasTitle() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'title' field.
      * @return This builder.
      */
    public com.supersidor.flightmap.avro.Position.Builder clearTitle() {
      title = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'altitude' field.
      * @return The value.
      */
    public float getAltitude() {
      return altitude;
    }


    /**
      * Sets the value of the 'altitude' field.
      * @param value The value of 'altitude'.
      * @return This builder.
      */
    public com.supersidor.flightmap.avro.Position.Builder setAltitude(float value) {
      validate(fields()[1], value);
      this.altitude = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'altitude' field has been set.
      * @return True if the 'altitude' field has been set, false otherwise.
      */
    public boolean hasAltitude() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'altitude' field.
      * @return This builder.
      */
    public com.supersidor.flightmap.avro.Position.Builder clearAltitude() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'latitude' field.
      * @return The value.
      */
    public double getLatitude() {
      return latitude;
    }


    /**
      * Sets the value of the 'latitude' field.
      * @param value The value of 'latitude'.
      * @return This builder.
      */
    public com.supersidor.flightmap.avro.Position.Builder setLatitude(double value) {
      validate(fields()[2], value);
      this.latitude = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'latitude' field has been set.
      * @return True if the 'latitude' field has been set, false otherwise.
      */
    public boolean hasLatitude() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'latitude' field.
      * @return This builder.
      */
    public com.supersidor.flightmap.avro.Position.Builder clearLatitude() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'longitude' field.
      * @return The value.
      */
    public double getLongitude() {
      return longitude;
    }


    /**
      * Sets the value of the 'longitude' field.
      * @param value The value of 'longitude'.
      * @return This builder.
      */
    public com.supersidor.flightmap.avro.Position.Builder setLongitude(double value) {
      validate(fields()[3], value);
      this.longitude = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'longitude' field has been set.
      * @return True if the 'longitude' field has been set, false otherwise.
      */
    public boolean hasLongitude() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'longitude' field.
      * @return This builder.
      */
    public com.supersidor.flightmap.avro.Position.Builder clearLongitude() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'heading' field.
      * @return The value.
      */
    public float getHeading() {
      return heading;
    }


    /**
      * Sets the value of the 'heading' field.
      * @param value The value of 'heading'.
      * @return This builder.
      */
    public com.supersidor.flightmap.avro.Position.Builder setHeading(float value) {
      validate(fields()[4], value);
      this.heading = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'heading' field has been set.
      * @return True if the 'heading' field has been set, false otherwise.
      */
    public boolean hasHeading() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'heading' field.
      * @return This builder.
      */
    public com.supersidor.flightmap.avro.Position.Builder clearHeading() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.supersidor.flightmap.avro.Position.Builder setTimestamp(long value) {
      validate(fields()[5], value);
      this.timestamp = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public com.supersidor.flightmap.avro.Position.Builder clearTimestamp() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * @return The value.
      */
    public long getUserId() {
      return userId;
    }


    /**
      * Sets the value of the 'userId' field.
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public com.supersidor.flightmap.avro.Position.Builder setUserId(long value) {
      validate(fields()[6], value);
      this.userId = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'userId' field.
      * @return This builder.
      */
    public com.supersidor.flightmap.avro.Position.Builder clearUserId() {
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Position build() {
      try {
        Position record = new Position();
        record.title = fieldSetFlags()[0] ? this.title : (java.lang.String) defaultValue(fields()[0]);
        record.altitude = fieldSetFlags()[1] ? this.altitude : (java.lang.Float) defaultValue(fields()[1]);
        record.latitude = fieldSetFlags()[2] ? this.latitude : (java.lang.Double) defaultValue(fields()[2]);
        record.longitude = fieldSetFlags()[3] ? this.longitude : (java.lang.Double) defaultValue(fields()[3]);
        record.heading = fieldSetFlags()[4] ? this.heading : (java.lang.Float) defaultValue(fields()[4]);
        record.timestamp = fieldSetFlags()[5] ? this.timestamp : (java.lang.Long) defaultValue(fields()[5]);
        record.userId = fieldSetFlags()[6] ? this.userId : (java.lang.Long) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Position>
    WRITER$ = (org.apache.avro.io.DatumWriter<Position>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Position>
    READER$ = (org.apache.avro.io.DatumReader<Position>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.title);

    out.writeFloat(this.altitude);

    out.writeDouble(this.latitude);

    out.writeDouble(this.longitude);

    out.writeFloat(this.heading);

    out.writeLong(this.timestamp);

    out.writeLong(this.userId);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.title = in.readString();

      this.altitude = in.readFloat();

      this.latitude = in.readDouble();

      this.longitude = in.readDouble();

      this.heading = in.readFloat();

      this.timestamp = in.readLong();

      this.userId = in.readLong();

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.title = in.readString();
          break;

        case 1:
          this.altitude = in.readFloat();
          break;

        case 2:
          this.latitude = in.readDouble();
          break;

        case 3:
          this.longitude = in.readDouble();
          break;

        case 4:
          this.heading = in.readFloat();
          break;

        case 5:
          this.timestamp = in.readLong();
          break;

        case 6:
          this.userId = in.readLong();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










