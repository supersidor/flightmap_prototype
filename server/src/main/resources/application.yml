server:
  port: 8080
kafka:
  topic:
    position: position2
spring:
  datasource:
    url: jdbc:postgresql://localhost:5432/postgres
    username: postgres
    password: mysecretpassword

  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update
      naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
  security:
    oauth2:
      client:
        registration:
          github:
            clientId: 8a6800699899d685e5a5
            clientSecret: b0c12cee1bd7b41f5e5a00762fd90a85c2a49853
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - user:email
              - read:user
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.LongSerializer
      value-serializer: com.supersidor.flightmap.kafka.PositionSerializer
      compression-type: gzip
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.LongDeserializer
      value-deserializer: com.supersidor.flightmap.kafka.PositionDeserializer
      auto-offset-reset: earliest
      enable-auto-commit: false
      properties:
        specific.avro.reader: true

  cache:
    jcache:
      config: classpath:ehcache.xml
app:
  auth:
    tokenSecret: 926D96C90030DD58429D2751AC1BDBBC
    tokenExpirationMsec: 864000000
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - http://localhost:3000/oauth2/redirect
      - http://localhost:8080
      - myandroidapp://oauth2/redirect
      - myiosapp://oauth2/redirect
